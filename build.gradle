plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'maven-publish'
}

group 'SSBBungeeBridge'
version = "1.0.0"

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'

    repositories {
        String mavenUsername = project.hasProperty('mavenUsername') ? project.mavenUsername : System.getenv('mavenUsername');
        String mavenPassword = project.hasProperty('mavenPassword') ? project.mavenPassword : System.getenv('mavenPassword');

        if (mavenUsername != null && mavenPassword != null) {
            maven {
                url 'https://repo.bg-software.com/repository/private-libs/'
                credentials {
                    username mavenUsername
                    password mavenPassword
                }
            }
        }
    }

    shadowJar {
        archiveFileName = "${project.name}.jar"
        destinationDirectory = file("../archive/")
    }

    build {
        dependsOn shadowJar
    }
}

dependencies {
    implementation fileTree("archive")
}

jar {
    from {
        for (File file : new File("archive").listFiles()) {
            zipTree(file)
        }
    }
}

shadowJar {
    dependsOn(jar)

    if (System.getenv("BUILD_NUMBER") == null) {
        archiveName = rootProject.name + "-" + version + ".jar"
    } else {
        archiveName = rootProject.name + "-" + version + "-b" + System.getenv("BUILD_NUMBER") + ".jar"
    }

    delete fileTree('./target/') {
        exclude archiveName
    }

    destinationDir = file("./target/")
    from sourceSets.getByName("main").output
    configurations = [project.configurations.getByName("runtimeClasspath")]
}

task copyAPI(type: Copy) {
    from './archive/API.jar'
    into './target/'
    rename('API.jar', rootProject.name + 'API.jar')
}

clean {
    delete file('./archive/')
}

build {
    dependsOn shadowJar
    dependsOn copyAPI
    dependsOn clean
}

publish.shouldRunAfter shadowJar
shadowJar.shouldRunAfter build
build.shouldRunAfter subprojects.build